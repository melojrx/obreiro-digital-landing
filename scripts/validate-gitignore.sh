#!/bin/bash

# =================================
# OBREIRO DIGITAL - VALIDADOR DE GITIGNORE
# =================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Contador de problemas
ISSUES=0

log_header "VALIDA√á√ÉO DO GITIGNORE"

# 1. Verificar se arquivos sens√≠veis est√£o sendo ignorados
log_info "Verificando arquivos sens√≠veis..."

SENSITIVE_FILES=(
    ".env"
    ".env_dev"
    ".env_prod"
    ".env.local"
    "secrets.json"
    "credentials.json"
    "local_settings.py"
)

for file in "${SENSITIVE_FILES[@]}"; do
    if [ -f "$file" ]; then
        if git check-ignore "$file" > /dev/null 2>&1; then
            log_success "$file est√° sendo ignorado corretamente"
        else
            log_error "$file EXISTE mas N√ÉO est√° sendo ignorado!"
            ((ISSUES++))
        fi
    fi
done

# 2. Verificar se diret√≥rios de build est√£o sendo ignorados
log_info "Verificando diret√≥rios de build..."

BUILD_DIRS=(
    "frontend/node_modules"
    "frontend/dist"
    "backend/__pycache__"
    "backend/media"
    "backend/staticfiles"
    "backups"
)

for dir in "${BUILD_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        if git check-ignore "$dir" > /dev/null 2>&1; then
            log_success "$dir est√° sendo ignorado corretamente"
        else
            log_error "$dir EXISTE mas N√ÉO est√° sendo ignorado!"
            ((ISSUES++))
        fi
    fi
done

# 3. Verificar se n√£o h√° arquivos sens√≠veis commitados
log_info "Verificando hist√≥rico por arquivos sens√≠veis..."

SENSITIVE_PATTERNS=(
    "password"
    "secret"
    "key"
    "token"
    "credentials"
    "SECRET_KEY"
    "DATABASE_URL"
    "POSTGRES_PASSWORD"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    if git log --all --grep="$pattern" --oneline | grep -qi "$pattern"; then
        log_warning "Poss√≠vel refer√™ncia a '$pattern' encontrada no hist√≥rico de commits"
    fi
done

# 4. Verificar se arquivos de exemplo existem
log_info "Verificando arquivos de exemplo..."

EXAMPLE_FILES=(
    ".env_dev.example"
    ".env_prod.example"
)

for file in "${EXAMPLE_FILES[@]}"; do
    if [ -f "$file" ]; then
        if git check-ignore "$file" > /dev/null 2>&1; then
            log_error "$file deveria estar no reposit√≥rio, mas est√° sendo ignorado!"
            ((ISSUES++))
        else
            log_success "$file est√° presente e ser√° versionado"
        fi
    else
        log_warning "$file n√£o existe - considere criar um template"
    fi
done

# 5. Verificar tamanho do reposit√≥rio
log_info "Verificando tamanho do reposit√≥rio..."

REPO_SIZE=$(du -sh .git 2>/dev/null | cut -f1)
log_info "Tamanho do reposit√≥rio: $REPO_SIZE"

# 6. Verificar se h√° arquivos grandes n√£o ignorados
log_info "Verificando arquivos grandes..."

LARGE_FILES=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./backend/media/*" -not -path "./backups/*" 2>/dev/null || true)

if [ -n "$LARGE_FILES" ]; then
    log_warning "Arquivos grandes encontrados:"
    echo "$LARGE_FILES"
    log_warning "Considere adicion√°-los ao .gitignore se apropriado"
fi

# 7. Verificar se h√° logs sendo versionados
log_info "Verificando logs..."

LOG_FILES=$(find . -name "*.log" -not -path "./.git/*" 2>/dev/null || true)

if [ -n "$LOG_FILES" ]; then
    for log_file in $LOG_FILES; do
        if git check-ignore "$log_file" > /dev/null 2>&1; then
            log_success "$log_file est√° sendo ignorado"
        else
            log_warning "$log_file n√£o est√° sendo ignorado"
        fi
    done
fi

# 8. Verificar certificados SSL
log_info "Verificando certificados SSL..."

SSL_FILES=$(find . -name "*.crt" -o -name "*.key" -o -name "*.pem" -not -path "./.git/*" 2>/dev/null || true)

if [ -n "$SSL_FILES" ]; then
    for ssl_file in $SSL_FILES; do
        if git check-ignore "$ssl_file" > /dev/null 2>&1; then
            log_success "$ssl_file est√° sendo ignorado"
        else
            log_error "$ssl_file N√ÉO est√° sendo ignorado - RISCO DE SEGURAN√áA!"
            ((ISSUES++))
        fi
    done
fi

# 9. Verificar cache de desenvolvimento
log_info "Verificando cache de desenvolvimento..."

CACHE_DIRS=(
    ".cache"
    ".pytest_cache"
    ".mypy_cache"
    ".eslintcache"
    "node_modules/.cache"
)

for dir in "${CACHE_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        if git check-ignore "$dir" > /dev/null 2>&1; then
            log_success "$dir est√° sendo ignorado"
        else
            log_warning "$dir n√£o est√° sendo ignorado"
        fi
    fi
done

# Resumo final
log_header "RESUMO"

if [ $ISSUES -eq 0 ]; then
    log_success "‚úÖ Nenhum problema cr√≠tico encontrado!"
    log_success "O .gitignore est√° funcionando corretamente."
else
    log_error "‚ùå $ISSUES problema(s) cr√≠tico(s) encontrado(s)!"
    log_error "Revise o .gitignore e corrija os problemas antes de fazer commit."
    exit 1
fi

log_info "üìã Recomenda√ß√µes:"
echo "- Sempre rode este script antes de fazer commits importantes"
echo "- Revise periodicamente o .gitignore conforme o projeto evolui"
echo "- Mantenha os arquivos .example atualizados"
echo "- Monitore o tamanho do reposit√≥rio"

log_success "üéâ Valida√ß√£o conclu√≠da com sucesso!"