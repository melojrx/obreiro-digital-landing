# Generated by Django 5.1.4 on 2025-06-12 00:01

import apps.core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChurchUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Data e hora de criação do registro",
                        verbose_name="Criado em",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Data e hora da última atualização",
                        verbose_name="Atualizado em",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se o registro está ativo no sistema",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("super_admin", "Super Administrador"),
                            ("denomination_admin", "Administrador de Denominação"),
                            ("church_admin", "Administrador da Igreja"),
                            ("pastor", "Pastor"),
                            ("secretary", "Secretário(a)"),
                            ("leader", "Líder"),
                            ("member", "Membro"),
                            ("read_only", "Somente Leitura"),
                        ],
                        default="member",
                        help_text="Papel do usuário nesta igreja",
                        max_length=20,
                        verbose_name="Papel",
                    ),
                ),
                (
                    "can_access_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode acessar área administrativa",
                        verbose_name="Acesso ao Admin",
                    ),
                ),
                (
                    "can_manage_members",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode gerenciar membros",
                        verbose_name="Gerenciar Membros",
                    ),
                ),
                (
                    "can_manage_visitors",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode gerenciar visitantes",
                        verbose_name="Gerenciar Visitantes",
                    ),
                ),
                (
                    "can_manage_activities",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode gerenciar atividades",
                        verbose_name="Gerenciar Atividades",
                    ),
                ),
                (
                    "can_view_reports",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode visualizar relatórios",
                        verbose_name="Ver Relatórios",
                    ),
                ),
                (
                    "can_manage_branches",
                    models.BooleanField(
                        default=False,
                        help_text="Se pode gerenciar filiais",
                        verbose_name="Gerenciar Filiais",
                    ),
                ),
                (
                    "joined_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Data que entrou na igreja",
                        verbose_name="Data de Ingresso",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Observações sobre este usuário",
                        verbose_name="Observações",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário da Igreja",
                "verbose_name_plural": "Usuários da Igreja",
                "ordering": ["church", "role", "user__email"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Data e hora de criação do registro",
                        verbose_name="Criado em",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Data e hora da última atualização",
                        verbose_name="Atualizado em",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se o registro está ativo no sistema",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        help_text="CPF do usuário (opcional)",
                        max_length=14,
                        null=True,
                        unique=True,
                        validators=[apps.core.models.validate_cpf],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        help_text="Data de nascimento",
                        null=True,
                        verbose_name="Data de Nascimento",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Foto do perfil do usuário",
                        null=True,
                        upload_to="profiles/avatars/",
                        verbose_name="Foto do Perfil",
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True,
                        help_text="Receber notificações por e-mail",
                        verbose_name="Notificações por E-mail",
                    ),
                ),
                (
                    "sms_notifications",
                    models.BooleanField(
                        default=False,
                        help_text="Receber notificações por SMS",
                        verbose_name="Notificações por SMS",
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Último endereço IP usado para login",
                        null=True,
                        verbose_name="Último IP de Login",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Biografia ou descrição do usuário",
                        verbose_name="Bio",
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil de Usuário",
                "verbose_name_plural": "Perfis de Usuários",
                "ordering": ["user__full_name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Endereço de e-mail único para login",
                        max_length=254,
                        unique=True,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        help_text="Nome completo do usuário",
                        max_length=200,
                        verbose_name="Nome Completo",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Telefone no formato (XX) XXXXX-XXXX",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telefone deve estar no formato: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX",
                                regex="^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$",
                            )
                        ],
                        verbose_name="Telefone",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
                "ordering": ["full_name", "email"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
