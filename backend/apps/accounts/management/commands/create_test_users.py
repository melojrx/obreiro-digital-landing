"""
Comando para criar usu√°rios de teste para todos os pap√©is do sistema.
√ötil para desenvolvimento e testes das funcionalidades e permiss√µes.

Perfis criados (conforme Sistema_de_Permissoes.md):
1. SUPER_ADMIN - Administrador da plataforma (desenvolvedores)
2. DENOMINATION_ADMIN - Administrador de denomina√ß√£o (m√∫ltiplas igrejas)
3. CHURCH_ADMIN - Administrador de igreja (igreja e filiais)
4. SECRETARY - Secret√°rio (gest√£o de cadastros em branches espec√≠ficas)

Uso:
python manage.py create_test_users
python manage.py create_test_users --clean  # Remove usu√°rios anteriores
python manage.py create_test_users --password minhasenha  # Define senha customizada
"""

from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from apps.accounts.models import ChurchUser, UserProfile
from apps.core.models import RoleChoices
from apps.churches.models import Church
from apps.branches.models import Branch
from apps.denominations.models import Denomination
from django.db import transaction
from datetime import date

User = get_user_model()


class Command(BaseCommand):
    help = 'Cria usu√°rios de teste para todos os 4 pap√©is do sistema (SUPER_ADMIN, DENOMINATION_ADMIN, CHURCH_ADMIN, SECRETARY)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clean',
            action='store_true',
            help='Remove usu√°rios de teste existentes antes de criar novos'
        )
        parser.add_argument(
            '--password',
            type=str,
            default='teste123',
            help='Senha para todos os usu√°rios de teste (padr√£o: teste123)'
        )

    def handle(self, *args, **options):
        password = options['password']
        clean = options['clean']

        self.stdout.write(self.style.SUCCESS('üöÄ Criando usu√°rios de teste para os 4 perfis do sistema...'))
        self.stdout.write(self.style.WARNING('üìñ Baseado em: docs/Sistema_de_Permissoes.md (v2.0)'))

        if clean:
            self.clean_test_users()

        try:
            with transaction.atomic():
                # 1. Criar usu√°rio tempor√°rio para satisfazer constraint da denomina√ß√£o
                temp_user, _ = User.objects.get_or_create(
                    email='temp@temp.com',
                    defaults={
                        'full_name': 'Temp User',
                        'phone': '(11) 99999-9999',
                        'is_profile_complete': True
                    }
                )
                temp_user.set_password(password)
                temp_user.save()

                # 2. Criar denomina√ß√£o de teste (usando temp_user como administrator tempor√°rio)
                denomination = self.create_test_denomination(temp_user)

                # 3. Criar SUPER_ADMIN agora que temos denomina√ß√£o
                users_created = []

                super_admin = self.create_super_admin(
                    email='superadmin@teste.com',
                    name='Super Admin (Plataforma)',
                    phone='(11) 91111-1111',
                    password=password,
                    description='Administrador da plataforma - Acesso total ao sistema',
                    denomination=denomination
                )
                users_created.append(super_admin)

                # 4. Atualizar denomina√ß√£o para usar super_admin como administrator
                denomination.administrator = super_admin['user']
                denomination.save()

                # 5. Deletar usu√°rio tempor√°rio
                temp_user.delete()

                # 3. Criar igreja da denomina√ß√£o
                church_denominacao = self.create_test_church(denomination, name_suffix='Denomina√ß√£o')

                # 4. Criar igreja independente
                church_independente = self.create_test_church(denomination, name_suffix='Independente')

                # 5. Criar filiais da igreja independente
                branch_matriz = self.create_test_branch(church_independente, "Matriz Central", is_main=True)
                branch_norte = self.create_test_branch(church_independente, "Congrega√ß√£o Norte")
                branch_sul = self.create_test_branch(church_independente, "Congrega√ß√£o Sul")

                # 6. Criar usu√°rios para cada papel
                # (SUPER_ADMIN j√° foi criado acima)

                # ========================================
                # CHURCH_ADMIN Denomina√ß√£o (N√≠vel 3-like) - Administrador de denomina√ß√£o
                # (DENOMINATION_ADMIN ainda n√£o implementado, usando CHURCH_ADMIN)
                # ========================================
                denomination_admin = self.create_test_user(
                    email='denominacao.admin@teste.com',
                    name='Admin da Denomina√ß√£o',
                    phone='(11) 92222-2222',
                    password=password,
                    church=church_denominacao,
                    role=RoleChoices.CHURCH_ADMIN,  # Usando CHURCH_ADMIN temporariamente
                    description='Administrador de denomina√ß√£o - Gerencia m√∫ltiplas igrejas (usa CHURCH_ADMIN por enquanto)'
                )
                users_created.append(denomination_admin)

                # ========================================
                # CHURCH_ADMIN (N√≠vel 2) - Administrador de igreja
                # ========================================
                church_admin = self.create_test_user(
                    email='igreja.admin@teste.com',
                    name='Admin da Igreja',
                    phone='(11) 93333-3333',
                    password=password,
                    church=church_independente,
                    role=RoleChoices.CHURCH_ADMIN,
                    description='Administrador de igreja - Gerencia matriz e todas as filiais'
                )
                users_created.append(church_admin)

                # ========================================
                # SECRETARY (N√≠vel 1) - Secret√°rio
                # ========================================
                # Secret√°rio com acesso √† Matriz e Norte
                secretary_matriz = self.create_test_user(
                    email='secretario.matriz@teste.com',
                    name='Secret√°rio - Matriz e Norte',
                    phone='(11) 94444-4444',
                    password=password,
                    church=church_independente,
                    role=RoleChoices.SECRETARY,
                    description='Secret√°rio - Acesso √† Matriz e Congrega√ß√£o Norte',
                    managed_branches=[branch_matriz, branch_norte]
                )
                users_created.append(secretary_matriz)

                # Secret√°rio com acesso apenas √† Congrega√ß√£o Sul
                secretary_sul = self.create_test_user(
                    email='secretario.sul@teste.com',
                    name='Secret√°rio - Congrega√ß√£o Sul',
                    phone='(11) 95555-5555',
                    password=password,
                    church=church_independente,
                    role=RoleChoices.SECRETARY,
                    description='Secret√°rio - Acesso apenas √† Congrega√ß√£o Sul',
                    managed_branches=[branch_sul]
                )
                users_created.append(secretary_sul)

                self.stdout.write(self.style.SUCCESS('\n‚úÖ Usu√°rios de teste criados com sucesso!'))
                self.print_summary(users_created, denomination, [church_denominacao, church_independente], [branch_matriz, branch_norte, branch_sul], password)

        except Exception as e:
            raise CommandError(f'Erro ao criar usu√°rios de teste: {str(e)}')

    def clean_test_users(self):
        """Remove usu√°rios de teste existentes"""
        self.stdout.write('üßπ Limpando usu√°rios de teste existentes...')

        # Ordem correta: Denomina√ß√µes -> Igrejas -> Usu√°rios (respeitando foreign keys protegidas)

        # 1. Limpar denomina√ß√£o de teste primeiro (tem protected FK para User)
        test_denominations = Denomination.objects.filter(name__icontains='Denomina√ß√£o Teste')
        denom_count = test_denominations.count()
        test_denominations.delete()

        # 2. Limpar igrejas de teste
        test_churches = Church.objects.filter(name__icontains='Igreja Teste')
        church_count = test_churches.count()
        test_churches.delete()

        # 3. Limpar igreja administrativa
        Church.objects.filter(name='Obreiro Virtual - Administra√ß√£o').delete()

        # 4. Agora podemos deletar os usu√°rios
        test_emails = [
            'superadmin@teste.com',
            'denominacao.admin@teste.com',
            'igreja.admin@teste.com',
            'secretario.matriz@teste.com',
            'secretario.sul@teste.com',
        ]

        deleted_users = User.objects.filter(email__in=test_emails)
        user_count = deleted_users.count()
        deleted_users.delete()

        self.stdout.write(f'‚úì Removidos: {user_count} usu√°rios, {church_count} igrejas, {denom_count} denomina√ß√µes')

    def create_test_denomination(self, administrator):
        """Cria denomina√ß√£o de teste"""
        denomination, created = Denomination.objects.get_or_create(
            name='Denomina√ß√£o Teste - Desenvolvimento',
            defaults={
                'short_name': 'Teste Dev',
                'description': 'Denomina√ß√£o criada para testes de desenvolvimento e permiss√µes',
                'administrator': administrator,
                'email': 'denominacao@teste.com',
                'phone': '(11) 90000-0000',
                'headquarters_address': 'Rua dos Testes, 123',
                'headquarters_city': 'S√£o Paulo',
                'headquarters_state': 'SP',
                'headquarters_zipcode': '01000-000',
                'allows_visitor_registration': True,
                'max_churches': 100,
                'max_members': 5000,
                'subscription_plan': 'denomination',
                'is_active': True
            }
        )

        if created:
            self.stdout.write('‚úì Denomina√ß√£o de teste criada')
        else:
            self.stdout.write('‚úì Denomina√ß√£o de teste encontrada')

        return denomination

    def create_test_church(self, denomination, name_suffix):
        """Cria igreja de teste"""
        church, created = Church.objects.get_or_create(
            name=f'Igreja Teste {name_suffix}',
            defaults={
                'short_name': f'Teste {name_suffix}',
                'denomination': denomination,
                'email': f'igreja{name_suffix.lower()}@teste.com',
                'phone': '(11) 98000-0001',
                'address': f'Avenida dos Testes {name_suffix}, 456',
                'city': 'S√£o Paulo',
                'state': 'SP',
                'zipcode': '01000-000',
                'subscription_plan': 'professional',
                'is_active': True
            }
        )

        if created:
            self.stdout.write(f'‚úì Igreja "{church.name}" criada')
        else:
            self.stdout.write(f'‚úì Igreja "{church.name}" encontrada')

        return church

    def create_test_branch(self, church, name, is_main=False):
        """Cria filial de teste"""
        branch, created = Branch.objects.get_or_create(
            church=church,
            name=name,
            defaults={
                'short_name': name,
                'is_main': is_main,
                'address': f'Rua {name}, 789',
                'neighborhood': 'Centro',
                'city': church.city,
                'state': church.state,
                'zipcode': church.zipcode,
                'email': f'{name.lower().replace(" ", "").replace("√ß", "c").replace("√£", "a")}@teste.com',
                'phone': church.phone,
                'allows_visitor_registration': True,
                'qr_code_active': True
            }
        )

        if created:
            self.stdout.write(f'‚úì Filial "{name}" criada')

        return branch

    def create_super_admin(self, email, name, phone, password, description, denomination=None):
        """Cria SUPER_ADMIN - Administrador da plataforma"""
        # Criar usu√°rio
        user, user_created = User.objects.get_or_create(
            email=email,
            defaults={
                'full_name': name,
                'phone': phone,
                'is_profile_complete': True,
                'is_staff': True,  # Acesso ao Django Admin
                'is_superuser': True  # Superuser do Django
            }
        )

        if user_created:
            user.set_password(password)
            user.save()

            # Criar perfil
            UserProfile.objects.create(
                user=user,
                birth_date=date(1990, 1, 1),
                gender='M',
                bio=description,
                email_notifications=True,
                sms_notifications=False
            )

        # Criar "igreja administrativa" para o SUPER_ADMIN
        church_defaults = {
            'short_name': 'Admin Platform',
            'email': 'admin@obreirovirtual.com',
            'phone': '(11) 99999-9999',
            'address': 'Endere√ßo da Plataforma',
            'city': 'S√£o Paulo',
            'state': 'SP',
            'zipcode': '01000-000',
            'subscription_plan': 'denomination'
        }

        if denomination:
            church_defaults['denomination'] = denomination

        platform_church, _ = Church.objects.get_or_create(
            name='Obreiro Virtual - Administra√ß√£o',
            defaults=church_defaults
        )

        # Criar ChurchUser com papel SUPER_ADMIN (bypassando valida√ß√µes)
        try:
            church_user = ChurchUser.objects.get(user=user, church=platform_church)
        except ChurchUser.DoesNotExist:
            church_user = ChurchUser(
                user=user,
                church=platform_church,
                role=RoleChoices.SUPER_ADMIN
            )
            # Usar super().save() para bypass valida√ß√µes (igual ao create_platform_admin.py)
            super(ChurchUser, church_user).save()

            # Configurar permiss√µes manualmente
            church_user.can_manage_members = True
            church_user.can_manage_visitors = True
            church_user.can_manage_branches = True
            church_user.can_view_reports = True
            super(ChurchUser, church_user).save()

        return {
            'user': user,
            'church_user': church_user,
            'church': platform_church,
            'role': RoleChoices.SUPER_ADMIN,
            'description': description,
            'branches': 'Todas (acesso global)'
        }

    def create_test_user(self, email, name, phone, password, church, role, description, managed_branches=None):
        """Cria usu√°rio de teste com papel espec√≠fico"""
        # Criar usu√°rio
        user, created = User.objects.get_or_create(
            email=email,
            defaults={
                'full_name': name,
                'phone': phone,
                'is_profile_complete': True
            }
        )

        if created:
            user.set_password(password)
            user.save()

            # Criar perfil
            UserProfile.objects.create(
                user=user,
                birth_date=date(1990, 1, 1),
                gender='M',
                bio=description,
                email_notifications=True,
                sms_notifications=False
            )

        # Criar ou atualizar ChurchUser
        church_user, created = ChurchUser.objects.get_or_create(
            user=user,
            church=church,
            defaults={'role': role}
        )

        if not created and church_user.role != role:
            church_user.role = role
            church_user.save()

        # Configurar filiais gerenciadas (apenas para SECRETARY)
        if role == RoleChoices.SECRETARY and managed_branches:
            church_user.managed_branches.set(managed_branches)
            branches_info = ', '.join([b.name for b in managed_branches])
        else:
            branches_info = 'Todas da igreja' if role == RoleChoices.CHURCH_ADMIN else 'N/A'

        return {
            'user': user,
            'church_user': church_user,
            'church': church,
            'role': role,
            'description': description,
            'branches': branches_info
        }

    def print_summary(self, users_created, denomination, churches, branches, password):
        """Imprime resumo dos usu√°rios criados"""
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('üìã RESUMO DOS USU√ÅRIOS DE TESTE CRIADOS'))
        self.stdout.write('='*70)

        self.stdout.write(f'\nüèõÔ∏è  Denomina√ß√£o: {denomination.name}')
        self.stdout.write(f'üè™ Igrejas: {", ".join([c.short_name for c in churches])}')
        self.stdout.write(f'üè¢ Filiais: {", ".join([b.name for b in branches])}')
        self.stdout.write(f'üîë Senha padr√£o: {password}')

        self.stdout.write('\nüë• USU√ÅRIOS CRIADOS (4 PERFIS):')
        self.stdout.write('-'*70)

        # Agrupar por n√≠vel hier√°rquico
        role_order = {
            RoleChoices.SUPER_ADMIN: '4Ô∏è‚É£ ',
            # DENOMINATION_ADMIN n√£o existe ainda, usando CHURCH_ADMIN: '3Ô∏è‚É£ ',
            RoleChoices.CHURCH_ADMIN: '2Ô∏è‚É£ ',
            RoleChoices.SECRETARY: '1Ô∏è‚É£ '
        }

        for user_data in users_created:
            user = user_data['user']
            role = user_data['role']
            description = user_data['description']
            church = user_data['church']
            branches = user_data['branches']

            level = role_order.get(role, '   ')

            self.stdout.write(f'\n{level}{self.style.SUCCESS(role)}')
            self.stdout.write(f'   üìß Email: {user.email}')
            self.stdout.write(f'   üë§ Nome: {user.full_name}')
            self.stdout.write(f'   üè™ Igreja: {church.short_name}')
            self.stdout.write(f'   üè¢ Filiais: {branches}')
            self.stdout.write(f'   üìù Descri√ß√£o: {description}')

        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  IMPORTANTE:'))
        self.stdout.write('‚Ä¢ Estes usu√°rios s√£o apenas para DESENVOLVIMENTO/TESTE')
        self.stdout.write('‚Ä¢ Use --clean para remover antes de criar novos')
        self.stdout.write('‚Ä¢ NUNCA use em produ√ß√£o!')
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üìñ Documenta√ß√£o: docs/Sistema_de_Permissoes.md'))
        self.stdout.write('='*70)

        self.stdout.write('\nüéØ PR√ìXIMOS PASSOS:')
        self.stdout.write('1. Acesse http://localhost:5173 (ou porta configurada)')
        self.stdout.write('2. Fa√ßa login com um dos emails acima')
        self.stdout.write(f'3. Senha: {password}')
        self.stdout.write('4. Teste as permiss√µes de cada perfil!')
        self.stdout.write('')
