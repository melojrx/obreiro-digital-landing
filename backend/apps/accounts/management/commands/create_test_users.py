"""
Comando para criar usu√°rios de teste para todos os pap√©is do sistema.
√ötil para desenvolvimento e testes das funcionalidades e permiss√µes.

Uso:
python manage.py create_test_users
"""

from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from apps.accounts.models import ChurchUser, UserProfile
from apps.core.models import RoleChoices
from apps.churches.models import Church
from apps.branches.models import Branch
from apps.denominations.models import Denomination
from django.db import transaction
from datetime import date

User = get_user_model()


class Command(BaseCommand):
    help = 'Cria usu√°rios de teste para todos os pap√©is do sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clean',
            action='store_true',
            help='Remove usu√°rios de teste existentes antes de criar novos'
        )
        parser.add_argument(
            '--password',
            type=str,
            default='teste123',
            help='Senha para todos os usu√°rios de teste (padr√£o: teste123)'
        )

    def handle(self, *args, **options):
        password = options['password']
        clean = options['clean']

        self.stdout.write(self.style.SUCCESS('üöÄ Criando usu√°rios de teste...'))

        if clean:
            self.clean_test_users()

        try:
            with transaction.atomic():
                # 1. Criar denomina√ß√£o de teste
                denomination = self.create_test_denomination()
                
                # 2. Criar igreja sede de teste
                church_sede = self.create_test_church(denomination, is_sede=True)
                
                # 3. Criar igreja filha de teste
                church_filha = self.create_test_church(denomination, is_sede=False)
                
                # 4. Criar filiais
                branch_sede = self.create_test_branch(church_sede, "Sede Principal")
                branch_filial1 = self.create_test_branch(church_sede, "Filial Norte")
                branch_filial2 = self.create_test_branch(church_sede, "Filial Sul")
                
                # 5. Criar usu√°rios para cada papel
                users_created = []
                
                # DENOMINATION_ADMIN
                denomination_admin = self.create_test_user(
                    email='denominacao.admin@teste.com',
                    name='Admin Denomina√ß√£o',
                    phone='(11) 91111-1111',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.DENOMINATION_ADMIN,
                    description='Administrador da denomina√ß√£o - pode gerenciar todas as igrejas'
                )
                users_created.append(denomination_admin)
                
                # CHURCH_ADMIN (Igreja Sede)
                church_admin_sede = self.create_test_user(
                    email='igreja.admin@teste.com',
                    name='Admin Igreja Sede',
                    phone='(11) 92222-2222',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.CHURCH_ADMIN,
                    description='Administrador da igreja sede'
                )
                users_created.append(church_admin_sede)
                
                # CHURCH_ADMIN (Igreja Filha)
                church_admin_filha = self.create_test_user(
                    email='igreja.filha.admin@teste.com',
                    name='Admin Igreja Filha',
                    phone='(11) 92223-2223',
                    password=password,
                    church=church_filha,
                    role=RoleChoices.CHURCH_ADMIN,
                    description='Administrador da igreja filha'
                )
                users_created.append(church_admin_filha)
                
                # PASTOR
                pastor = self.create_test_user(
                    email='pastor@teste.com',
                    name='Pastor Principal',
                    phone='(11) 93333-3333',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.PASTOR,
                    description='Pastor da igreja'
                )
                users_created.append(pastor)
                
                # SECRETARY
                secretary = self.create_test_user(
                    email='secretario@teste.com',
                    name='Secret√°rio Igreja',
                    phone='(11) 94444-4444',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.SECRETARY,
                    description='Secret√°rio da igreja'
                )
                users_created.append(secretary)
                
                # LEADER (com filiais espec√≠ficas)
                leader = self.create_test_user(
                    email='lider@teste.com',
                    name='L√≠der Filial Norte',
                    phone='(11) 95555-5555',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.LEADER,
                    description='L√≠der respons√°vel pela filial norte',
                    managed_branches=[branch_filial1]
                )
                users_created.append(leader)
                
                # MEMBER (usu√°rio comum)
                member = self.create_test_user(
                    email='membro@teste.com',
                    name='Membro Comum',
                    phone='(11) 96666-6666',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.MEMBER,
                    description='Membro comum da igreja'
                )
                users_created.append(member)
                
                # READ_ONLY
                readonly = self.create_test_user(
                    email='readonly@teste.com',
                    name='Usu√°rio Somente Leitura',
                    phone='(11) 97777-7777',
                    password=password,
                    church=church_sede,
                    role=RoleChoices.READ_ONLY,
                    description='Usu√°rio com acesso somente leitura'
                )
                users_created.append(readonly)

                self.stdout.write(self.style.SUCCESS('\n‚úÖ Usu√°rios de teste criados com sucesso!'))
                self.print_summary(users_created, denomination, [church_sede, church_filha], password)

        except Exception as e:
            raise CommandError(f'Erro ao criar usu√°rios de teste: {str(e)}')

    def clean_test_users(self):
        """Remove usu√°rios de teste existentes"""
        self.stdout.write('üßπ Limpando usu√°rios de teste existentes...')
        
        test_emails = [
            'denominacao.admin@teste.com',
            'igreja.admin@teste.com',
            'igreja.filha.admin@teste.com',
            'pastor@teste.com',
            'secretario@teste.com',
            'lider@teste.com',
            'membro@teste.com',
            'readonly@teste.com'
        ]
        
        deleted_users = User.objects.filter(email__in=test_emails).delete()
        
        # Limpar igrejas de teste
        test_churches = Church.objects.filter(name__icontains='Teste').delete()
        
        # Limpar denomina√ß√£o de teste
        test_denominations = Denomination.objects.filter(name__icontains='Teste').delete()
        
        self.stdout.write(f'‚úì Removidos: {deleted_users[0]} usu√°rios, {test_churches[0]} igrejas, {test_denominations[0]} denomina√ß√µes')

    def create_test_denomination(self):
        """Cria denomina√ß√£o de teste"""
        denomination, created = Denomination.objects.get_or_create(
            name='Denomina√ß√£o Teste - Desenvolvimento',
            defaults={
                'short_name': 'Teste Dev',
                'description': 'Denomina√ß√£o criada para testes de desenvolvimento',
                'email': 'denominacao@teste.com',
                'phone': '(11) 90000-0000',
                'headquarters_address': 'Rua dos Testes, 123',
                'headquarters_city': 'S√£o Paulo',
                'headquarters_state': 'SP',
                'headquarters_zipcode': '01000-000',
                'administrator_id': 1  # Ser√° atualizado depois
            }
        )
        
        if created:
            self.stdout.write('‚úì Denomina√ß√£o de teste criada')
        else:
            self.stdout.write('‚úì Denomina√ß√£o de teste encontrada')
            
        return denomination

    def create_test_church(self, denomination, is_sede=True):
        """Cria igreja de teste"""
        suffix = 'Sede' if is_sede else 'Filha'
        
        church, created = Church.objects.get_or_create(
            name=f'Igreja Teste {suffix} - Desenvolvimento',
            defaults={
                'short_name': f'Teste {suffix}',
                'denomination': denomination,
                'email': f'igreja{suffix.lower()}@teste.com',
                'phone': f'(11) 9000{1 if is_sede else 2}-000{1 if is_sede else 2}',
                'address': f'Avenida dos Testes {suffix}, 456',
                'city': 'S√£o Paulo',
                'state': 'SP',
                'zipcode': '01000-000',
                'subscription_plan': 'professional'
            }
        )
        
        if created:
            self.stdout.write(f'‚úì Igreja {suffix} de teste criada')
        else:
            self.stdout.write(f'‚úì Igreja {suffix} de teste encontrada')
            
        return church

    def create_test_branch(self, church, name):
        """Cria filial de teste"""
        branch, created = Branch.objects.get_or_create(
            church=church,
            name=name,
            defaults={
                'short_name': name,
                'address': f'Rua {name}, 789',
                'neighborhood': 'Centro',
                'city': church.city,
                'state': church.state,
                'zipcode': church.zipcode,
                'email': f'{name.lower().replace(" ", "")}@teste.com',
                'phone': church.phone
            }
        )
        
        if created:
            self.stdout.write(f'‚úì Filial "{name}" criada')
            
        return branch

    def create_test_user(self, email, name, phone, password, church, role, description, managed_branches=None):
        """Cria usu√°rio de teste com papel espec√≠fico"""
        # Criar usu√°rio
        user, created = User.objects.get_or_create(
            email=email,
            defaults={
                'full_name': name,
                'phone': phone,
                'is_profile_complete': True
            }
        )
        
        if created:
            user.set_password(password)
            user.save()
            
            # Criar perfil
            UserProfile.objects.create(
                user=user,
                birth_date=date(1990, 1, 1),
                gender='M',
                bio=description,
                email_notifications=True,
                sms_notifications=False
            )
        
        # Criar ou atualizar ChurchUser
        church_user, created = ChurchUser.objects.get_or_create(
            user=user,
            church=church,
            defaults={'role': role}
        )
        
        if not created:
            church_user.role = role
            church_user.save()
        
        # Configurar filiais gerenciadas se fornecidas
        if managed_branches:
            church_user.managed_branches.set(managed_branches)
        
        return {
            'user': user,
            'church_user': church_user,
            'role': role,
            'description': description
        }

    def print_summary(self, users_created, denomination, churches, password):
        """Imprime resumo dos usu√°rios criados"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìã RESUMO DOS USU√ÅRIOS DE TESTE CRIADOS'))
        self.stdout.write('='*60)
        
        self.stdout.write(f'\nüèõÔ∏è  Denomina√ß√£o: {denomination.name}')
        self.stdout.write(f'üè™ Igrejas: {", ".join([c.name for c in churches])}')
        self.stdout.write(f'üîë Senha padr√£o: {password}')
        
        self.stdout.write('\nüë• USU√ÅRIOS CRIADOS:')
        self.stdout.write('-'*60)
        
        for user_data in users_created:
            user = user_data['user']
            role = user_data['role']
            description = user_data['description']
            
            self.stdout.write(f'üìß {user.email}')
            self.stdout.write(f'   üë§ {user.full_name}')
            self.stdout.write(f'   üé≠ {role} - {description}')
            self.stdout.write(f'   üì± {user.phone}')
            self.stdout.write('')
        
        self.stdout.write('='*60)
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  IMPORTANTE:'))
        self.stdout.write('‚Ä¢ Estes usu√°rios s√£o apenas para DESENVOLVIMENTO/TESTE')
        self.stdout.write('‚Ä¢ Use --clean para remover antes de criar novos')
        self.stdout.write('‚Ä¢ NUNCA use em produ√ß√£o!')
        self.stdout.write('='*60) 