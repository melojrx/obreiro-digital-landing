# Generated by Django 5.1.4 on 2025-06-12 00:01

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("churches", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Branch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Data e hora de criação do registro",
                        verbose_name="Criado em",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Data e hora da última atualização",
                        verbose_name="Atualizado em",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único universal",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indica se o registro está ativo no sistema",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome da filial ou congregação",
                        max_length=200,
                        verbose_name="Nome da Filial",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        help_text="Nome curto para exibição",
                        max_length=50,
                        verbose_name="Nome Abreviado",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Descrição da filial, histórico, ministérios",
                        verbose_name="Descrição",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="E-mail específico da filial",
                        max_length=254,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Telefone da filial no formato (XX) XXXXX-XXXX",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telefone deve estar no formato: (XX) XXXXX-XXXX ou (XX) XXXX-XXXX",
                                regex="^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$",
                            )
                        ],
                        verbose_name="Telefone",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="Endereço completo da filial", verbose_name="Endereço"
                    ),
                ),
                (
                    "neighborhood",
                    models.CharField(
                        help_text="Bairro da filial",
                        max_length=100,
                        verbose_name="Bairro",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        help_text="Cidade da filial",
                        max_length=100,
                        verbose_name="Cidade",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        help_text="Sigla do estado (ex: SP, RJ, MG)",
                        max_length=2,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        help_text="CEP no formato XXXXX-XXX",
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CEP deve estar no formato: XXXXX-XXX",
                                regex="^\\d{5}-\\d{3}$",
                            )
                        ],
                        verbose_name="CEP",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Coordenada de latitude para localização",
                        max_digits=10,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Coordenada de longitude para localização",
                        max_digits=11,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "qr_code_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Identificador único para o QR code",
                        unique=True,
                        verbose_name="UUID do QR Code",
                    ),
                ),
                (
                    "qr_code_image",
                    models.ImageField(
                        blank=True,
                        help_text="Imagem do QR code gerada automaticamente",
                        null=True,
                        upload_to="branches/qr_codes/",
                        verbose_name="Imagem do QR Code",
                    ),
                ),
                (
                    "qr_code_active",
                    models.BooleanField(
                        default=True,
                        help_text="Se o QR code está ativo para registro de visitantes",
                        verbose_name="QR Code Ativo",
                    ),
                ),
                (
                    "allows_visitor_registration",
                    models.BooleanField(
                        default=True,
                        help_text="Se permite registro via QR code",
                        verbose_name="Permite Registro de Visitantes",
                    ),
                ),
                (
                    "requires_visitor_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Se visitantes precisam de aprovação antes de aparecer no sistema",
                        verbose_name="Requer Aprovação de Visitantes",
                    ),
                ),
                (
                    "total_visitors",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total de visitantes registrados nesta filial",
                        verbose_name="Total de Visitantes",
                    ),
                ),
                (
                    "total_activities",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total de atividades realizadas nesta filial",
                        verbose_name="Total de Atividades",
                    ),
                ),
                (
                    "church",
                    models.ForeignKey(
                        help_text="Igreja à qual esta filial pertence",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="branches",
                        to="churches.church",
                        verbose_name="Igreja",
                    ),
                ),
                (
                    "pastor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Pastor ou líder responsável pela filial",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_branches",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Pastor Responsável",
                    ),
                ),
            ],
            options={
                "verbose_name": "Filial",
                "verbose_name_plural": "Filiais",
                "ordering": ["church", "name"],
                "indexes": [
                    models.Index(
                        fields=["church", "name"], name="branches_br_church__d5eed9_idx"
                    ),
                    models.Index(
                        fields=["church", "is_active"],
                        name="branches_br_church__4012d1_idx",
                    ),
                    models.Index(
                        fields=["qr_code_uuid"], name="branches_br_qr_code_5fbe5d_idx"
                    ),
                    models.Index(
                        fields=["state", "city"], name="branches_br_state_9ff8ab_idx"
                    ),
                    models.Index(
                        fields=["latitude", "longitude"],
                        name="branches_br_latitud_2c1b80_idx",
                    ),
                ],
                "unique_together": {("church", "name")},
            },
        ),
    ]
